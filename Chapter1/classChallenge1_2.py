#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Wed Sep 07 10:02:49 2022 Will Townsend"""# Student Challenge:## classChallenge1_2.py# # We investigate representing the following function as a Taylor# Polynomial degree 2, at different centers:## For the following function:# f(x) = e^(-x^2)## Part A. Create f and Create degree 2 approximation of f#         centered at 1.## Part B. Plot f and approximation function.## Part C. Create second approximating function with changeable (given)#         center of approximation; plot f, approx, and approx2.## Part D. Play (different centers, different orders of approximating #              functions)## Research: Does the error in approximation improve much for higher degree#           approximations on [-2,2] near 0? Near 1? Why or why not?### import librariesimport mathimport numpy# import plotting libraryimport matplotlib.pyplot as plt# Create f(x) = e^(-x^2)def f( x ):        #initialize a return value    retval = 0.0        # Do stuff to retval - evaluate given function    retval = math.exp(-1.0 * math.pow(x,2))        # return of retval    return retval# approximate f(x) above with taylor poly of degree 2def approx(x):        # return the result of the function approximation    return math.exp(-1.0)-2*math.exp(-1.0)*(x-1)+math.exp(-1.0)*math.pow(x-1,2)# approximate f(x) with taylor polynomial of degree 2 with a center of cdef approx2(x,c):        retval = f(c)    retval = retval - 2*c*math.exp(-1.0*math.pow(c,2))*(x-c)    retval = retval + math.exp(-1.0*math.pow(c,2))*(2*math.pow(c,2)-1)*math.pow(x-c,2)        return retval# set up a list oof valuesvals = [-0.5, 0.0, 0.5, 1.0, 1.5]# iterate thu values to test the function f(x) and approx(x)for v in vals:    print('x = {:8.8f},\tf(x) = {:8.8f},\tapprox(x) = {:8.8f}'.format(v, f(v), approx2(v,1)))